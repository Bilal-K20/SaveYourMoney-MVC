@model SaveYourMoney_MVC.ViewModels.CategoryViewModel

@{
    ViewData["Title"] = "Categories";
}

@*<h1 class="card-header">Categories</h1>*@

@if (Model.Categories == null || !Model.Categories.Any())
{
    <div class="container text-center py-5">
        <h1 class="display-4">No existing categories found!</h1>
        <p class="lead">There are no categories to show because you haven't created any.</p>
        <a href="AddCategory" class="btn btn-success btn-lg">Add a new category</a>
    </div>
}
else
{
    <div class="container py-5">
        <h1 class="display-4 text-center mb-4">Here are your current categories!</h1>

        <div class="text-center mb-4">
            <a href="AddCategory" class="btn btn-success btn-lg">Add a new category</a>
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-bordered" id="categoryTable">
                <thead>
                    <tr>
                        <th>Category Name</th>
                        <th>Budget Amount</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in Model.Categories)
                    {
                        <tr>
                            <td>@category.CategoryName</td>
                            <td>
                                @if (Model.Budgets != null)
                                {
                                    var budget = Model.Budgets.FirstOrDefault(b => b.CategoryId == category.CategoryId);
                                    @if (budget != null)
                                    {
                                        @budget.Amount
                                    }
                                    else
                                    {
                                        <span>No budget amount could be fetched. </span>
                                    }
                                }
                                else
                                {
                                    <span>No budget set</span>
                                }
                            </td>
                            <td>
                                <a asp-controller="Category" asp-action="EditCategory" asp-route-categoryName="@category.CategoryName" class="btn btn-primary">Edit</a>
                                <form asp-controller="Category" asp-action="DeleteCategory" method="post" style="display: inline;">
                                    <input type="hidden" name="categoryName" value="@category.CategoryName" />
                                    <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this category?');">Delete</button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="row justify-content-center">
            <div class="col-auto">
                <div class="entries-dropdown">
                    <label for="entriesPerPage" class="form-label">Entries per page:</label>
                    <select id="entriesPerPage" class="form-select">
                        <option value="5">5</option>
                        <option value="10">10</option>
                    </select>
                </div>
            </div>
            <div class="col-auto">
                <nav aria-label="Pagination">
                    <ul class="pagination">
                        <!-- Pagination links will be generated dynamically here -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
}

<style>
    /* Table styles */
    #categoryTable {
        font-family: Arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

        #categoryTable th, #categoryTable td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        #categoryTable th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        #categoryTable tbody tr:hover {
            background-color: #f5f5f5;
        }

    /* Pagination styles */
    .pagination {
        display: flex;
        list-style: none;
        padding: 0;
        margin-top: 10px;
    }

        .pagination li {
            margin-right: 5px;
        }

            .pagination li a {
                text-decoration: none;
                padding: 5px 10px;
                border: 1px solid #ccc;
                border-radius: 4px;
                color: #333;
            }

                .pagination li a:hover {
                    background-color: #f2f2f2;
                }

        .pagination .active a {
            background-color: #007bff;
            color: #fff;
        }

    /* Dropdown styles */
    .entries-dropdown {
        margin-top: 10px;
    }
</style>


@section Scripts {
    <script>document.addEventListener('DOMContentLoaded', function () {
            var table = document.getElementById('categoryTable'); // Corrected ID
            var paginationContainer = document.querySelector('.pagination');
            var entriesDropdown = document.getElementById('entriesPerPage');
            var currentPage = 1;

            // Display the first page of data by default
            displayData(currentPage);

            // Event listener for entries per page dropdown
            entriesDropdown.addEventListener('change', function () {
                displayData(currentPage);
            });

            function displayData(page) {
                var itemsPerPage = parseInt(entriesDropdown.value);
                var rows = table.querySelectorAll('tbody tr');
                var pageCount = Math.ceil(rows.length / itemsPerPage);

                // Display rows for the current page, hide others
                var start = (page - 1) * itemsPerPage;
                var end = start + itemsPerPage;
                for (var i = 0; i < rows.length; i++) {
                    if (i >= start && i < end) {
                        rows[i].style.display = '';
                    } else {
                        rows[i].style.display = 'none';
                    }
                }

                // Generate pagination links
                var paginationHTML = '';
                for (var i = 1; i <= pageCount; i++) {
                    paginationHTML += `<li class="page-item${i === page ? ' active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                }
                paginationContainer.innerHTML = paginationHTML;

                // Add click event listener to pagination links
                var paginationLinks = paginationContainer.querySelectorAll('.page-link');
                paginationLinks.forEach(function (link) {
                    link.addEventListener('click', function (event) {
                        event.preventDefault();
                        currentPage = parseInt(this.getAttribute('data-page'));
                        displayData(currentPage);
                    });
                });
            }
        });</script>
}
