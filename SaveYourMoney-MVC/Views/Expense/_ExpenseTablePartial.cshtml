@model SaveYourMoney_MVC.ViewModels.ExpenseViewModel

@if (Model.Expenses == null || !Model.Expenses.Any())
{
    <div class="container text-center py-5">
        <h1 class="display-4">No existing expenses found!</h1>
        <p class="lead">There are no expenses to show because you haven't created any.</p>
        <a href="AddExpense" class="btn btn-success btn-lg" data-bs-toggle="modal" data-bs-target="#addExpenseModal">Add a new expense</a>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Expense Title</th>
                    <th>Type Of Transaction</th>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th>Attached Document</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expense in Model.Expenses)
                {
                    <tr>
                        <td>@expense.ExpenseTitle</td>
                        <td>@expense.Type</td>
                        <td>@expense.Description</td>
                        <td>@Html.Raw(expense.Amount.ToString("C", System.Globalization.CultureInfo.CurrentCulture))</td>
                        <td>@Model.Categories.FirstOrDefault(c => c.CategoryId == expense.CategoryId)?.CategoryName</td>
                        <td>@expense.Date.ToShortDateString()</td>
                        <td>
                            @if (!string.IsNullOrEmpty(expense.AttachmentFileName) && expense.AttachmentData != null)
                            {
                                <a href="javascript:void(0)" onclick="previewDocument('@expense.AttachmentFileName', '@Convert.ToBase64String(expense.AttachmentData)')">Preview</a>
                            }
                            else
                            {
                                <p>No document attached</p>
                            }
                        </td>
                        <td>
                            <a asp-controller="Expense" asp-action="EditExpense" asp-route-expenseId="@expense.ExpenseId" class="btn btn-primary">Edit</a>
                            <form asp-controller="Expense" asp-action="DeleteExpense" method="post" style="display: inline;">
                                <input type="hidden" name="expenseId" value="@expense.ExpenseId" />
                                <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this expense?');">Delete</button>
                            </form>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}



<!-- Remove reference to file-type library if not needed -->
<!-- <script src="https://cdn.jsdelivr.net/npm/file-type/build/file-type.min.js"></script> -->

<script>// Function to determine file extension from data
    function determineExtensionFromData(data) {
        const magicNumbers = {
            'ffd8ffe0': 'jpg',
            '89504e47': 'png',
            '47494638': 'gif',
            '25504446': 'pdf'
        };

        const byteCharacters = atob(data);
        const byteNumbers = new Array(byteCharacters.length);

        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i).toString(16);
        }

        const hexSignature = byteNumbers.join('').substring(0, 8).toLowerCase();

        return magicNumbers[hexSignature] || null;
    }

    // Function to preview document
    function previewDocument(fileName, data) {
        console.log("In previewDocument function");
        console.log("fileName:", fileName);
        console.log("data:", data);

        const extension = determineExtensionFromData(data);
        console.log("extension:", extension);

        if (extension === 'pdf') {
            const blob = base64ToBlob(data, 'application/pdf');
            console.log("blob:", blob);
            const url = URL.createObjectURL(blob);
            window.open(url, '_blank');
        } else if (['jpg', 'jpeg', 'png', 'gif'].includes(extension)) {
            const imageUrl = "data:image/" + extension + ";base64," + data;
            const imgWindow = window.open("");
            imgWindow.document.write("<img src='" + imageUrl + "'/>");
        } else {
            alert("Unsupported file type. Cannot preview this file.");
        }
    }

    // Function to convert base64 to blob
    function base64ToBlob(base64, contentType) {
        const byteCharacters = atob(base64);
        const byteArrays = [];

        for (let offset = 0; offset < byteCharacters.length; offset += 512) {
            const slice = byteCharacters.slice(offset, offset + 512);

            const byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }

            const byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }

        const blob = new Blob(byteArrays, { type: contentType });
        return blob;
    }</script>




