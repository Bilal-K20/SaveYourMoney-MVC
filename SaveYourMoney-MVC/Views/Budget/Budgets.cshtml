@model BudgetViewModel

@{
    ViewData["Title"] = "Budgets";
}

@if (Model.Budgets == null || !Model.Budgets.Any())
{
    <div class="container text-center py-5">
        <h1 class="display-4">No existing budgets found!</h1>
        <p class="lead">There are no budgets to show because you haven't created any.</p>
        <a href="CreateANewBudget" class="btn btn-success btn-lg">Create a new budget</a>
    </div>
}
else
{
    <div class="container py-5">
        <h1 class="display-4 text-center mb-4">Here are your current budgets!</h1>

        <div class="text-center mb-4">
            <a href="CreateANewBudget" class="btn btn-success btn-lg">Create a new budget</a>
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-bordered" id="budgetTable">
                <thead>
                    <tr>
                        <th>Budget Id</th>
                        <th>Budget Amount</th>
                        <th>Category Name</th>
                        <th>Description</th>
                        <th>Date Set</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var budget in Model.Budgets)
                    {
                        <tr>
                            <td>@budget.BudgetId</td>
                            <td>@budget.Amount</td>
                            <td>@Model.Categories.FirstOrDefault(c => c.CategoryId == budget.CategoryId)?.CategoryName</td>
                            <td>@budget.Description</td>
                            <td>@budget.Date</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="row justify-content-center">
            <div class="col-auto">
                <div class="entries-dropdown">
                    <label for="entriesPerPage" class="form-label">Entries per page:</label>
                    <select id="entriesPerPage" class="form-select">
                        <option value="5">5</option>
                        <option value="10">10</option>
                    </select>
                </div>
            </div>
            <div class="col-auto">
                <nav aria-label="Pagination">
                    <ul class="pagination">
                        <!-- Pagination links will be generated dynamically here -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>document.addEventListener('DOMContentLoaded', function () {
            var table = document.getElementById('budgetTable');
            var paginationContainer = document.querySelector('.pagination');
            var entriesDropdown = document.getElementById('entriesPerPage');
            var currentPage = 1;

            // Display the first page of data by default
            displayData(currentPage);

            // Event listener for entries per page dropdown
            entriesDropdown.addEventListener('change', function () {
                displayData(currentPage);
            });

            function displayData(page) {
                var itemsPerPage = parseInt(entriesDropdown.value);
                var rows = table.querySelectorAll('tbody tr');
                var pageCount = Math.ceil(rows.length / itemsPerPage);

                // Display rows for the current page, hide others
                var start = (page - 1) * itemsPerPage;
                var end = Math.min(start + itemsPerPage, rows.length); // Ensure end doesn't exceed the total number of rows
                for (var i = 0; i < rows.length; i++) {
                    if (i >= start && i < end) {
                        rows[i].style.display = '';
                    } else {
                        rows[i].style.display = 'none';
                    }
                }

                // Generate pagination links
                var paginationHTML = '';
                for (var i = 1; i <= pageCount; i++) {
                    paginationHTML += `<li class="page-item${i === page ? ' active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                }
                paginationContainer.innerHTML = paginationHTML;

                // Add click event listener to pagination links
                var paginationLinks = paginationContainer.querySelectorAll('.page-link');
                paginationLinks.forEach(function (link) {
                    link.addEventListener('click', function (event) {
                        event.preventDefault();
                        currentPage = parseInt(this.getAttribute('data-page'));
                        displayData(currentPage);
                    });
                });
            }
        });</script>
}
