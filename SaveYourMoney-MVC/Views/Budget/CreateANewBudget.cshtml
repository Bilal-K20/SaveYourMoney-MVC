@model SaveYourMoney_MVC.ViewModels.AddANewBudgetViewModel

<form method="post" onsubmit="return validateForm()">
    <div class="form-group">
        <label for="amount">Amount:</label>
        <input type="number" class="form-control" id="amount" name="amount" value="@Model.Amount" required>
    </div>
    <div class="form-group">
        <label for="category">Category:</label>
        <select class="form-control" id="category" name="selectedCategoryId" asp-for="SelectedCategoryId">
            <option value="">Please select a category</option>
            @foreach (var category in Model.Categories)
            {
                <option value="@category.CategoryId">@category.CategoryName</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="description">Description:</label>
        <input type="text" class="form-control" id="description" name="description" value="@Model.Description">
    </div>
    <div class="form-group">
        <label for="date">Date:</label>
        <input type="date" class="form-control" id="date" name="date" placeholder="Select a date within the last 3 months" required>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<script>
    function validateForm() {
        var category = document.getElementById("category").value;
        if (category === "") {
            alert("Please select a category.");
            return false;
        }

        var amount = document.getElementById("amount").value;
        if (amount <= 0)
        {
            alert("Amount has to be greater than 0");
            return false
        }

        var description = document.getElementById("description").value;
        var descriptionRegex = /^[a-zA-Z0-9\s]+$/;
        if (!descriptionRegex.test(description)) {
            alert("Invalid description format. Description can contain alphanumeric characters and spaces.");
            return false;
        }

        var selectedDate = new Date(document.getElementById("date").value);
        var today = new Date();
        var threeMonthsAgo = new Date(today);
        threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);

        var oneMonthAhead = new Date(today);
        oneMonthAhead.setMonth(oneMonthAhead.getMonth() + 1);

        if (selectedDate < threeMonthsAgo) {
            alert("Please select a date within the last 3 months.");
            return false;
        } else if (selectedDate > oneMonthAhead)
        {
            alert("The date cannot be in more than one month in the future")
            return false;
        }

        return true;
    }</script>
